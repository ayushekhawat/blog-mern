# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
.env












import {Button,TextInput} from 'flowbite-react'
import {useSelector} from 'react-redux'
import { useEffect, useRef, useState } from 'react';
import {getDownloadURL,getStorage,ref,uploadBytesResumable,} from 'firebase/storage';
import {app} from '../firebase'
export default function DashProfile() {
    const {currentUser}= useSelector((state)=>state.user)
    const [imageFile, setImageFile] = useState(null);
    const [imageFileUrl, setImageFileUrl] = useState(null);
    const [imageFileUploadProgress, setImageFileUploadProgress] = useState(null);
    const [imageFileUploadError, setImageFileUploadError] = useState(null);
       console.log(imageFileUploadProgress,imageFileUploadError)
       const filePickerRef =useRef()
    const handleImageChange=(e)=>{
      
        const file = e.target.files[0];
        if (file) {
          setImageFile(file);
          setImageFileUrl(URL.createObjectURL(file));
        }
      };
     useEffect(()=>{
         if(imageFile){
            uploadImage()
         }
     },[imageFile])
     const uploadImage=async()=>{
        console.log('uploading image...')
        
          // service firebase.storage {
          //   match /b/{bucket}/o {
          //     match /{allPaths=**} {
          //       allow read;
          //       allow write: if
          //       request.resource.size < 2 * 1024 * 1024 &&
          //       request.resource.contentType.matches('image/.*')
          //     }
          //   }
          // }
          const storage =getStorage(app)
          const fileName = new Date().getTime()+ imageFile.name
          const StorageRef =ref(storage , fileName)
          const uploadTask = uploadBytesResumable(StorageRef, imageFile)
          uploadTask.on('state_changed', (snapshot)=>{
            const progress = (snapshot.bytesTransferred / snapshot.totalBytes) *100;
            // console.log(`upload is  : ${progress}% done`);
            setImageFileUploadProgress(progress.toFixed(0))
          }, (error)=>{
            setImageFileUploadError('Could not upload image (File must be less than 2MB)')
          }, ()=>{
            getDownloadURL(uploadTask.snapshot.ref)
            .then (url =>{ setImageFileUrl(url)});
          })
     }
   
  return (
    <div className='max-w-lg mx-auto p-3 w-full'>
        <h1 className='my-7 text-center font-semibold text-3xl'>Profile</h1>
       <form className='flex flex-col gap-4'>
           <input type="file" accept='image/*' onClick={handleImageChange} ref={filePickerRef} hidden/>
            <div className='w-32 h-32 self-center overflow-hidden cursor-pointer shadow-md rounded-full' onClick={()=> filePickerRef.current.click()}>
               <img src={ imageFileUrl || currentUser.profilePicture} 
               alt="user" 
               className="rounded-full w-full h-full object-cover' border-8 border-[lightgray] "/>
            </div>
            <TextInput type='text'
              id='username'
              placeholder='username'
              defaultValue={currentUser.username} />
            <TextInput type='text'
              id='email'
              placeholder='email'
              defaultValue={currentUser.email} />
            <TextInput type='text'
              id='password'
              placeholder='password' />
           <Button type='submit' gradientDuoTone='purpleToBlue' outline>Update </Button>
       </form>
       <div className="text-red-500 flex justify-between mt-5">
        <span className='cursor-pointer'>Delete Account</span>
        <span className='cursor-pointer'>Sign Out</span>
      </div>
    </div>
  )
}
